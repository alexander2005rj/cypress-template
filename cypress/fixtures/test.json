{
    "status": "finished",
    "startedTestsAt": "2023-07-24T20:01:53.622Z",
    "endedTestsAt": "2023-07-24T20:01:58.481Z",
    "totalDuration": 4859,
    "totalSuites": 2,
    "totalTests": 6,
    "totalPassed": 5,
    "totalPending": 1,
    "totalFailed": 0,
    "totalSkipped": 0,
    "runs": [
        {
            "stats": {
                "suites": 2,
                "tests": 6,
                "passes": 5,
                "pending": 1,
                "skipped": 0,
                "failures": 0,
                "duration": 4859,
                "startedAt": "2023-07-24T20:01:53.622Z",
                "endedAt": "2023-07-24T20:01:58.481Z"
            },
            "reporter": "cypress-mochawesome-reporter",
            "reporterStats": {
                "suites": 2,
                "tests": 6,
                "passes": 5,
                "pending": 1,
                "failures": 0,
                "start": "2023-07-24T20:01:53.628Z",
                "end": "2023-07-24T20:01:58.507Z",
                "duration": 4879,
                "testsRegistered": 6,
                "passPercent": 100,
                "pendingPercent": 16.666666666666664,
                "other": 0,
                "hasOther": false,
                "skipped": 0,
                "hasSkipped": false
            },
            "hooks": [
                {
                    "hookName": "before each",
                    "title": [
                        "\"before each\" hook"
                    ],
                    "body": "() => {\n    // Cypress starts out with a blank slate for each test\n    // so we must tell it to visit our website with the `cy.visit()` command.\n    // Since we want to visit the same URL at the start of all our tests,\n    // we include it in our beforeEach function so that it runs before each test\n    cy.visit('https://example.cypress.io/todo');\n  }"
                },
                {
                    "hookName": "before each",
                    "title": [
                        "\"before each\" hook"
                    ],
                    "body": "() => {\n      // We'll take the command we used above to check off an element\n      // Since we want to perform multiple tests that start with checking\n      // one element, we put it in the beforeEach hook\n      // so that it runs at the start of every test.\n      cy.contains('Pay electric bill').parent().find('input[type=checkbox]').check();\n    }"
                }
            ],
            "tests": [
                {
                    "title": [
                        "example to-do app",
                        "displays two todo items by default"
                    ],
                    "state": "passed",
                    "body": "() => {\n    // We use the `cy.get()` command to get all elements that match the selector.\n    // Then, we use `should` to assert that there are two matched items,\n    // which are the two default items.\n\n    cy.get('.todo-list li').should('have.length', 2);\n\n    // We can go even further and check that the default todos each contain\n    // the correct text. We use the `first` and `last` functions\n    // to get just the first and last matched elements individually,\n    // and then perform an assertion with `should`.\n    cy.get('.todo-list li').first().should('have.text', 'Pay electric bill');\n    cy.get('.todo-list li').last().should('have.text', 'Walk the dog');\n  }",
                    "displayError": null,
                    "attempts": [
                        {
                            "state": "passed",
                            "error": null,
                            "videoTimestamp": 4988,
                            "duration": 663,
                            "startedAt": "2023-07-24T20:01:55.820Z",
                            "screenshots": []
                        }
                    ]
                },
                {
                    "title": [
                        "example to-do app",
                        "can add new todo items"
                    ],
                    "state": "passed",
                    "body": "() => {\n    // We'll store our item text in a variable so we can reuse it\n    const newItem = 'Feed the cat';\n\n    // Let's get the input element and use the `type` command to\n    // input our new list item. After typing the content of our item,\n    // we need to type the enter key as well in order to submit the input.\n    // This input has a data-test attribute so we'll use that to select the\n    // element in accordance with best practices:\n    // https://on.cypress.io/selecting-elements\n\n    // ForÃ§ando erro\n    cy.get('[data-test=new-todo]').type(`${newItem}{enter}`);\n\n    // Now that we've typed our new item, let's check that it actually was added to the list.\n    // Since it's the newest item, it should exist as the last element in the list.\n    // In addition, with the two default items, we should have a total of 3 elements in the list.\n    // Since assertions yield the element that was asserted on,\n    // we can chain both of these assertions together into a single statement.\n    cy.get('.todo-list li').should('have.length', 3).last().should('have.text', newItem);\n  }",
                    "displayError": null,
                    "attempts": [
                        {
                            "state": "passed",
                            "error": null,
                            "videoTimestamp": 5654,
                            "duration": 742,
                            "startedAt": "2023-07-24T20:01:56.486Z",
                            "screenshots": []
                        }
                    ]
                },
                {
                    "title": [
                        "example to-do app",
                        "can check off an item as completed"
                    ],
                    "state": "passed",
                    "body": "() => {\n    // In addition to using the `get` command to get an element by selector,\n    // we can also use the `contains` command to get an element by its contents.\n    // However, this will yield the <label>, which is lowest-level element that contains the text.\n    // In order to check the item, we'll find the <input> element for this <label>\n    // by traversing up the dom to the parent element. From there, we can `find`\n    // the child checkbox <input> element and use the `check` command to check it.\n    cy.contains('Pay electric bill').parent().find('input[type=checkbox]').check();\n\n    // Now that we've checked the button, we can go ahead and make sure\n    // that the list element is now marked as completed.\n    // Again we'll use `contains` to find the <label> element and then use the `parents` command\n    // to traverse multiple levels up the dom until we find the corresponding <li> element.\n    // Once we get that element, we can assert that it has the completed class.\n    cy.contains('Pay electric bill').parents('li').should('have.class', 'completed');\n  }",
                    "displayError": null,
                    "attempts": [
                        {
                            "state": "passed",
                            "error": null,
                            "videoTimestamp": 6399,
                            "duration": 324,
                            "startedAt": "2023-07-24T20:01:57.231Z",
                            "screenshots": []
                        }
                    ]
                },
                {
                    "title": [
                        "example to-do app",
                        "with a checked task",
                        "can filter for uncompleted tasks"
                    ],
                    "state": "passed",
                    "body": "() => {\n      // We'll click on the \"active\" button in order to\n      // display only incomplete items\n      cy.contains('Active').click();\n\n      // After filtering, we can assert that there is only the one\n      // incomplete item in the list.\n      cy.get('.todo-list li').should('have.length', 1).first().should('have.text', 'Walk the dog');\n\n      // For good measure, let's also assert that the task we checked off\n      // does not exist on the page.\n      cy.contains('Pay electric bill').should('not.exist');\n    }",
                    "displayError": null,
                    "attempts": [
                        {
                            "state": "passed",
                            "error": null,
                            "videoTimestamp": 6726,
                            "duration": 434,
                            "startedAt": "2023-07-24T20:01:57.558Z",
                            "screenshots": []
                        }
                    ]
                },
                {
                    "title": [
                        "example to-do app",
                        "with a checked task",
                        "can filter for completed tasks"
                    ],
                    "state": "passed",
                    "body": "() => {\n      // We can perform similar steps as the test above to ensure\n      // that only completed tasks are shown\n      cy.contains('Completed').click();\n      cy.get('.todo-list li').should('have.length', 1).first().should('have.text', 'Pay electric bill');\n      cy.contains('Walk the dog').should('not.exist');\n    }",
                    "displayError": null,
                    "attempts": [
                        {
                            "state": "passed",
                            "error": null,
                            "videoTimestamp": 7163,
                            "duration": 474,
                            "startedAt": "2023-07-24T20:01:57.995Z",
                            "screenshots": []
                        }
                    ]
                },
                {
                    "title": [
                        "example to-do app",
                        "with a checked task",
                        "can delete all completed tasks"
                    ],
                    "state": "pending",
                    "body": "() => {\n      // First, let's click the \"Clear completed\" button\n      // `contains` is actually serving two purposes here.\n      // First, it's ensuring that the button exists within the dom.\n      // This button only appears when at least one task is checked\n      // so this command is implicitly verifying that it does exist.\n      // Second, it selects the button so we can click it.\n      cy.contains('Clear completed').click();\n\n      // Then we can make sure that there is only one element\n      // in the list and our element does not exist\n      cy.get('.todo-list li').should('have.length', 1).should('not.have.text', 'Pay electric bill');\n\n      // Finally, make sure that the clear button no longer exists.\n      cy.contains('Clear completed').should('not.exist');\n    }",
                    "displayError": null,
                    "attempts": [
                        {
                            "state": "pending",
                            "error": null,
                            "videoTimestamp": null,
                            "duration": null,
                            "startedAt": null,
                            "screenshots": []
                        }
                    ]
                }
            ],
            "error": null,
            "video": "/home/alexander/Projects/Nitro/cypress-web/cypress/videos/todo.cy.js.mp4",
            "spec": {
                "fileExtension": ".js",
                "baseName": "todo.cy.js",
                "fileName": "todo",
                "specFileExtension": ".cy.js",
                "relativeToCommonRoot": "todo.cy.js",
                "specType": "integration",
                "name": "cypress/e2e/1-getting-started/todo.cy.js",
                "relative": "cypress/e2e/1-getting-started/todo.cy.js",
                "absolute": "/home/alexander/Projects/Nitro/cypress-web/cypress/e2e/1-getting-started/todo.cy.js"
            },
            "shouldUploadVideo": true
        }
    ],
    "browserPath": "",
    "browserName": "electron",
    "browserVersion": "106.0.5249.51",
    "osName": "linux",
    "osVersion": "Linux Mint - ",
    "cypressVersion": "12.17.2",
    "config": {
        "viewportHeight": 660,
        "viewportWidth": 1000,
        "defaultCommandTimeout": 30000,
        "videoCompression": false,
        "experimentalWebKitSupport": true,
        "reporter": "cypress-mochawesome-reporter",
        "reporterOptions": {
            "reportDir": "cypress/reports",
            "charts": true,
            "embeddedScreenshots": true,
            "inlineAssets": false,
            "videoOnFailOnly": true,
            "saveAllAttempts": false,
            "overwrite": true
        },
        "setupNodeEvents": "[Function setupNodeEvents]",
        "projectRoot": "/home/alexander/Projects/Nitro/cypress-web",
        "projectName": "cypress-web",
        "repoRoot": "/home/alexander/Projects/Nitro/cypress-web",
        "rawJson": {
            "viewportHeight": 660,
            "viewportWidth": 1000,
            "defaultCommandTimeout": 30000,
            "videoCompression": false,
            "experimentalWebKitSupport": true,
            "reporter": "cypress-mochawesome-reporter",
            "reporterOptions": {
                "reportDir": "cypress/reports",
                "charts": true,
                "embeddedScreenshots": true,
                "inlineAssets": false,
                "videoOnFailOnly": true,
                "saveAllAttempts": false,
                "overwrite": true
            },
            "e2e": {
                "setupNodeEvents": "[Function setupNodeEvents]"
            },
            "setupNodeEvents": "[Function setupNodeEvents]",
            "envFile": {},
            "projectRoot": "/home/alexander/Projects/Nitro/cypress-web",
            "projectName": "cypress-web",
            "repoRoot": "/home/alexander/Projects/Nitro/cypress-web"
        },
        "configFile": "cypress.config.js",
        "morgan": false,
        "isTextTerminal": true,
        "socketId": "bzcifu9u0w",
        "report": true,
        "animationDistanceThreshold": 5,
        "arch": "x64",
        "baseUrl": null,
        "blockHosts": null,
        "chromeWebSecurity": true,
        "clientCertificates": [],
        "downloadsFolder": "/home/alexander/Projects/Nitro/cypress-web/cypress/downloads",
        "env": {},
        "execTimeout": 60000,
        "experimentalCspAllowList": false,
        "experimentalFetchPolyfill": false,
        "experimentalInteractiveRunEvents": false,
        "experimentalRunAllSpecs": false,
        "experimentalMemoryManagement": false,
        "experimentalModifyObstructiveThirdPartyCode": false,
        "experimentalSkipDomainInjection": null,
        "experimentalOriginDependencies": false,
        "experimentalSourceRewriting": false,
        "experimentalSingleTabRunMode": false,
        "experimentalStudio": false,
        "fileServerFolder": "/home/alexander/Projects/Nitro/cypress-web",
        "fixturesFolder": "/home/alexander/Projects/Nitro/cypress-web/cypress/fixtures",
        "excludeSpecPattern": "*.hot-update.js",
        "includeShadowDom": false,
        "keystrokeDelay": 0,
        "modifyObstructiveCode": true,
        "numTestsKeptInMemory": 0,
        "platform": "linux",
        "pageLoadTimeout": 60000,
        "port": 33709,
        "projectId": null,
        "redirectionLimit": 20,
        "requestTimeout": 5000,
        "resolvedNodePath": "/home/alexander/.nvm/versions/node/v18.16.1/bin/node",
        "resolvedNodeVersion": "18.16.1",
        "responseTimeout": 30000,
        "retries": {
            "runMode": 0,
            "openMode": 0
        },
        "screenshotOnRunFailure": true,
        "screenshotsFolder": "/home/alexander/Projects/Nitro/cypress-web/cypress/screenshots",
        "slowTestThreshold": 10000,
        "scrollBehavior": "top",
        "supportFile": "/home/alexander/Projects/Nitro/cypress-web/cypress/support/e2e.js",
        "supportFolder": "/home/alexander/Projects/Nitro/cypress-web/cypress/support",
        "taskTimeout": 60000,
        "testIsolation": true,
        "trashAssetsBeforeRuns": true,
        "userAgent": null,
        "video": true,
        "videosFolder": "/home/alexander/Projects/Nitro/cypress-web/cypress/videos",
        "videoUploadOnPasses": true,
        "waitForAnimations": true,
        "watchForFileChanges": false,
        "specPattern": "cypress/e2e/**/*.cy.{js,jsx,ts,tsx}",
        "additionalIgnorePattern": [],
        "autoOpen": false,
        "browsers": [
            {
                "name": "chrome",
                "family": "chromium",
                "channel": "stable",
                "displayName": "Chrome",
                "version": "115.0.5790.102",
                "path": "google-chrome",
                "minSupportedVersion": 64,
                "majorVersion": "115"
            },
            {
                "name": "firefox",
                "family": "firefox",
                "channel": "stable",
                "displayName": "Firefox",
                "version": "115.0.2",
                "path": "firefox",
                "minSupportedVersion": 86,
                "majorVersion": "115"
            },
            {
                "name": "webkit",
                "channel": "stable",
                "family": "webkit",
                "displayName": "WebKit",
                "version": "17.0",
                "path": "/home/alexander/.cache/ms-playwright/webkit-1869/pw_run.sh",
                "majorVersion": "17",
                "warning": "WebKit support is currently experimental. Some functions may not work as expected."
            },
            {
                "name": "electron",
                "channel": "stable",
                "family": "chromium",
                "displayName": "Electron",
                "version": "106.0.5249.51",
                "path": "",
                "majorVersion": 106
            }
        ],
        "clientRoute": "/__/",
        "cypressBinaryRoot": "/home/alexander/.cache/Cypress/12.17.2/Cypress/resources/app",
        "devServerPublicPathRoute": "/__cypress/src",
        "hosts": null,
        "isInteractive": true,
        "namespace": "__cypress",
        "reporterRoute": "/__cypress/reporter",
        "socketIoCookie": "__socket",
        "socketIoRoute": "/__socket",
        "version": "12.17.2",
        "cypressEnv": "production",
        "resolved": {
            "animationDistanceThreshold": {
                "value": 5,
                "from": "default"
            },
            "arch": {
                "value": "x64",
                "from": "default"
            },
            "baseUrl": {
                "value": null,
                "from": "default"
            },
            "blockHosts": {
                "value": null,
                "from": "default"
            },
            "chromeWebSecurity": {
                "value": true,
                "from": "default"
            },
            "clientCertificates": {
                "value": [],
                "from": "default"
            },
            "defaultCommandTimeout": {
                "value": 30000,
                "from": "config"
            },
            "downloadsFolder": {
                "value": "cypress/downloads",
                "from": "default"
            },
            "env": {},
            "execTimeout": {
                "value": 60000,
                "from": "default"
            },
            "experimentalCspAllowList": {
                "value": false,
                "from": "default"
            },
            "experimentalFetchPolyfill": {
                "value": false,
                "from": "default"
            },
            "experimentalInteractiveRunEvents": {
                "value": false,
                "from": "default"
            },
            "experimentalRunAllSpecs": {
                "value": false,
                "from": "default"
            },
            "experimentalMemoryManagement": {
                "value": false,
                "from": "default"
            },
            "experimentalModifyObstructiveThirdPartyCode": {
                "value": false,
                "from": "default"
            },
            "experimentalSkipDomainInjection": {
                "value": null,
                "from": "default"
            },
            "experimentalOriginDependencies": {
                "value": false,
                "from": "default"
            },
            "experimentalSourceRewriting": {
                "value": false,
                "from": "default"
            },
            "experimentalSingleTabRunMode": {
                "value": false,
                "from": "default"
            },
            "experimentalStudio": {
                "value": false,
                "from": "default"
            },
            "experimentalWebKitSupport": {
                "value": true,
                "from": "config"
            },
            "fileServerFolder": {
                "value": "",
                "from": "default"
            },
            "fixturesFolder": {
                "value": "cypress/fixtures",
                "from": "default"
            },
            "excludeSpecPattern": {
                "value": "*.hot-update.js",
                "from": "default"
            },
            "includeShadowDom": {
                "value": false,
                "from": "default"
            },
            "keystrokeDelay": {
                "value": 0,
                "from": "default"
            },
            "modifyObstructiveCode": {
                "value": true,
                "from": "default"
            },
            "nodeVersion": {
                "from": "default"
            },
            "numTestsKeptInMemory": {
                "value": 0,
                "from": "config"
            },
            "platform": {
                "value": "linux",
                "from": "default"
            },
            "pageLoadTimeout": {
                "value": 60000,
                "from": "default"
            },
            "port": {
                "value": null,
                "from": "default"
            },
            "projectId": {
                "value": null,
                "from": "default"
            },
            "redirectionLimit": {
                "value": 20,
                "from": "default"
            },
            "reporter": {
                "value": "cypress-mochawesome-reporter",
                "from": "config"
            },
            "reporterOptions": {
                "value": {
                    "reportDir": "cypress/reports",
                    "charts": true,
                    "embeddedScreenshots": true,
                    "inlineAssets": false,
                    "videoOnFailOnly": true,
                    "saveAllAttempts": false,
                    "overwrite": true
                },
                "from": "config"
            },
            "requestTimeout": {
                "value": 5000,
                "from": "default"
            },
            "resolvedNodePath": {
                "value": null,
                "from": "default"
            },
            "resolvedNodeVersion": {
                "value": null,
                "from": "default"
            },
            "responseTimeout": {
                "value": 30000,
                "from": "default"
            },
            "retries": {
                "value": {
                    "runMode": 0,
                    "openMode": 0
                },
                "from": "default"
            },
            "screenshotOnRunFailure": {
                "value": true,
                "from": "default"
            },
            "screenshotsFolder": {
                "value": "cypress/screenshots",
                "from": "default"
            },
            "slowTestThreshold": {
                "value": 10000,
                "from": "default"
            },
            "scrollBehavior": {
                "value": "top",
                "from": "default"
            },
            "supportFile": {
                "value": "cypress/support/e2e.{js,jsx,ts,tsx}",
                "from": "default"
            },
            "supportFolder": {
                "value": false,
                "from": "default"
            },
            "taskTimeout": {
                "value": 60000,
                "from": "default"
            },
            "testIsolation": {
                "value": true,
                "from": "default"
            },
            "trashAssetsBeforeRuns": {
                "value": true,
                "from": "default"
            },
            "userAgent": {
                "value": null,
                "from": "default"
            },
            "video": {
                "value": true,
                "from": "default"
            },
            "videoCompression": {
                "value": false,
                "from": "config"
            },
            "videosFolder": {
                "value": "cypress/videos",
                "from": "default"
            },
            "videoUploadOnPasses": {
                "value": true,
                "from": "default"
            },
            "viewportHeight": {
                "value": 660,
                "from": "default"
            },
            "viewportWidth": {
                "value": 1000,
                "from": "default"
            },
            "waitForAnimations": {
                "value": true,
                "from": "default"
            },
            "watchForFileChanges": {
                "value": false,
                "from": "config"
            },
            "specPattern": {
                "value": "cypress/e2e/**/*.cy.{js,jsx,ts,tsx}",
                "from": "default"
            },
            "browsers": {
                "value": [
                    {
                        "name": "chrome",
                        "family": "chromium",
                        "channel": "stable",
                        "displayName": "Chrome",
                        "version": "115.0.5790.102",
                        "path": "google-chrome",
                        "minSupportedVersion": 64,
                        "majorVersion": "115"
                    },
                    {
                        "name": "firefox",
                        "family": "firefox",
                        "channel": "stable",
                        "displayName": "Firefox",
                        "version": "115.0.2",
                        "path": "firefox",
                        "minSupportedVersion": 86,
                        "majorVersion": "115"
                    },
                    {
                        "name": "webkit",
                        "channel": "stable",
                        "family": "webkit",
                        "displayName": "WebKit",
                        "version": "17.0",
                        "path": "/home/alexander/.cache/ms-playwright/webkit-1869/pw_run.sh",
                        "majorVersion": "17",
                        "warning": "WebKit support is currently experimental. Some functions may not work as expected."
                    },
                    {
                        "name": "electron",
                        "channel": "stable",
                        "family": "chromium",
                        "displayName": "Electron",
                        "version": "106.0.5249.51",
                        "path": "",
                        "majorVersion": 106,
                        "isHeadless": true,
                        "isHeaded": false
                    }
                ],
                "from": "runtime"
            },
            "hosts": {
                "value": null,
                "from": "default"
            },
            "isInteractive": {
                "value": true,
                "from": "default"
            }
        },
        "testingType": "e2e",
        "remote": {
            "origin": "http://localhost:33709",
            "strategy": "file",
            "fileServer": "http://localhost:34957",
            "domainName": "localhost",
            "props": null
        },
        "browser": null,
        "specs": [],
        "proxyUrl": "http://localhost:33709",
        "browserUrl": "http://localhost:33709/__/",
        "reporterUrl": "http://localhost:33709/__cypress/reporter",
        "proxyServer": "http://localhost:33709",
        "state": {}
    }
}